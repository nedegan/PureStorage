Last login: Tue Oct 10 13:52:01 on ttys001

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
Neds-MacBook-Pro15-4:~ ned$ brew install --cask powershell
-bash: brew: command not found
Neds-MacBook-Pro15-4:~ ned$ pwsh
PowerShell 6.2.0
Copyright (c) Microsoft Corporation. All rights reserved.

https://aka.ms/pscore6-docs
Type 'help' to get help.

PS /Users/ned> brew install --cask powershell
brew : The term 'brew' is not recognized as the name of a cmdlet, function, script file, or operable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ brew install --cask powershell
+ ~~~~
+ CategoryInfo          : ObjectNotFound: (brew:String) [], CommandNotFoundException
+ FullyQualifiedErrorId : CommandNotFoundException
 
PS /Users/ned> exit
Neds-MacBook-Pro15-4:~ ned$ (echo; echo 'eval "$(/opt/homebrew/bin/brew shellenv)"') >> /Users/ned/.bash_profile
Neds-MacBook-Pro15-4:~ ned$ eval "$(/opt/homebrew/bin/brew shellenv)"
Neds-MacBook-Pro15-4:~ ned$ brew
Example usage:
  brew search TEXT|/REGEX/
  brew info [FORMULA|CASK...]
  brew install FORMULA|CASK...
  brew update
  brew upgrade [FORMULA|CASK...]
  brew uninstall FORMULA|CASK...
  brew list [FORMULA|CASK...]

Troubleshooting:
  brew config
  brew doctor
  brew install --verbose --debug FORMULA|CASK

Contributing:
  brew create URL [--no-fetch]
  brew edit [FORMULA|CASK...]

Further help:
  brew commands
  brew help [COMMAND]
  man brew
  https://docs.brew.sh
Neds-MacBook-Pro15-4:~ ned$ brew update
==> Homebrew collects anonymous analytics.
Read the analytics documentation (and how to opt-out) here:
  https://docs.brew.sh/Analytics
No analytics have been recorded yet (nor will be during this `brew` run).

==> Homebrew is run entirely by unpaid volunteers. Please consider donating:
  https://github.com/Homebrew/brew#donations

Already up-to-date.
Neds-MacBook-Pro15-4:~ ned$ brew upgrade powershell --cask
Error: Cask 'powershell' is not installed.
Neds-MacBook-Pro15-4:~ ned$ pwsh
PowerShell 6.2.0
Copyright (c) Microsoft Corporation. All rights reserved.

https://aka.ms/pscore6-docs
Type 'help' to get help.

PS /Users/ned> brew upgrade powershell --cask
Error: Cask 'powershell' is not installed.
PS /Users/ned> 
PS /Users/ned> 
PS /Users/ned> exit
Neds-MacBook-Pro15-4:~ ned$ brew install --cask powershell
==> Caveats
To use Homebrew in PowerShell, set:
  Add-Content -Path $PROFILE.CurrentUserAllHosts -Value '$(/opt/homebrew/bin/brew shellenv) | Invoke-Expression'

==> Downloading https://github.com/PowerShell/PowerShell/releases/download/v7.3.7/powershell-7.3.7-osx-arm64.pkg
==> Downloading from https://objects.githubusercontent.com/github-production-release-asset-2e65be/49609581/45458bac-656a-4629-8
######################################################################################################################## 100.0%
==> Installing dependencies: ca-certificates, openssl@3
==> Downloading https://ghcr.io/v2/homebrew/core/ca-certificates/manifests/2023-08-22
######################################################################################################################## 100.0%
==> Fetching ca-certificates
==> Downloading https://ghcr.io/v2/homebrew/core/ca-certificates/blobs/sha256:a331e92e7a759571296581f029e5cc2ec7cee70cd92dc0b5f
######################################################################################################################## 100.0%
==> Installing ca-certificates
==> Pouring ca-certificates--2023-08-22.arm64_ventura.bottle.tar.gz
==> Regenerating CA certificate bundle from keychain, this may take a while...
🍺  /opt/homebrew/Cellar/ca-certificates/2023-08-22: 3 files, 221.6KB
==> Downloading https://ghcr.io/v2/homebrew/core/openssl/3/manifests/3.1.3
######################################################################################################################## 100.0%
==> Fetching openssl@3
==> Downloading https://ghcr.io/v2/homebrew/core/openssl/3/blobs/sha256:297a2c1c5cc8a43dd60afd548326caf13e2b5ebefe56215068d7b1a
######################################################################################################################## 100.0%
==> Installing openssl@3
==> Pouring openssl@3--3.1.3.arm64_ventura.bottle.tar.gz
🍺  /opt/homebrew/Cellar/openssl@3/3.1.3: 6,495 files, 28.4MB
==> Installing Cask powershell
==> Running installer for powershell with sudo; the password may be necessary.
Password:
installer: Package name is PowerShell - 7.3.7
installer: Installing at base path /
installer: The install was successful.
🍺  powershell was successfully installed!
Neds-MacBook-Pro15-4:~ ned$ 
Neds-MacBook-Pro15-4:~ ned$ 
Neds-MacBook-Pro15-4:~ ned$ pwsh
PowerShell 7.3.7
PS /Users/ned> 
PS /Users/ned> 
PS /Users/ned> 
PS /Users/ned> 
PS /Users/ned> 
PS /Users/ned> #####                  
PS /Users/ned> # Work in progress
PS /Users/ned> #####
PS /Users/ned> $vcenter  = "VC1.ne-lab.local"
PS /Users/ned> $vcuser   = "administrator@puremagic.local"
PS /Users/ned> $vcpass   = "P@ssword1"
PS /Users/ned> $endpoint = "nelab-flasharray2.ne-lab.local"
PS /Users/ned> $podname  = "TestDR"
PS /Users/ned> $cluster  = "Prod"
PS /Users/ned> $dsname   = "ProdTest"
PS /Users/ned> $user = "pureuser"
PS /Users/ned> $password = "P@ssword1"
PS /Users/ned> $cred = Get-Credential -Message "Enter credentials for Pure Array"

PowerShell credential request
Enter credentials for Pure Array
User: pureuser
Password for user pureuser: *********

PS /Users/ned> # imports
PS /Users/ned> Import-Module PureStoragePowerShellSDK2
Import-Module: The specified module 'PureStoragePowerShellSDK2' was not loaded because no valid module file was found in any module directory.
PS /Users/ned> # Connect to vCenter
PS /Users/ned> Connect-VIserver $vcenter -user $vcuser -password $vcpass
Connect-VIserver: The term 'Connect-VIserver' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> # Promote the DR Site Pod
PS /Users/ned> # $promote = "purepod promote $podname"
PS /Users/ned> # New-PfaCLICommand -EndPoint $endpoint -CommandText $promote -UserName $username -Password (ConvertTo-SecureString -AsPlainText $password -Force)
PS /Users/ned> # Invoke-Pfa2CLICommand -Credential $cred -EndPoint $endpoint -CommandText $promote
PS /Users/ned> # or the following:
PS /Users/ned> # $RemotePod = Get-Pfa2Pod -Name $podname
PS /Users/ned> # Update-Pfa2Pod -Array $TargetArray -Name $RemotePod.Name  -RequestedPromotionState "promoted"
PS /Users/ned> # From Jase: connect to target pod and promote it
PS /Users/ned> Connect-Pfa2Array -IgnoreCertificateError -Endpoint $endpoint -Credential $cred
Connect-Pfa2Array: The term 'Connect-Pfa2Array' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> $ADRPOD = Get-Pfa2Pod -Name $podname
Get-Pfa2Pod: The term 'Get-Pfa2Pod' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> Update-Pfa2Pod -Name $ADRPOD.Name -RequestedPromotionState "promoted" #promote the pod
Update-Pfa2Pod: The term 'Update-Pfa2Pod' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> #
PS /Users/ned> # Wait for the DR Site Pod to be promoted
PS /Users/ned> $podstatus = "purepod list $podname"
PS /Users/ned> do {
>>     Write-Host "Waiting for Pod Promotion"
>>     Start-Sleep -Milliseconds 500
>>     $test = Invoke-Pfa2CLICommand -EndPoint $endpoint -CommandText $podstatus -Credential $cred
>> } while ($test | select-string -pattern "promoting")
Waiting for Pod Promotion
Invoke-Pfa2CLICommand: 
Line |
   4 |      $test = Invoke-Pfa2CLICommand -EndPoint $endpoint -CommandText $p …
     |              ~~~~~~~~~~~~~~~~~~~~~
     | The term 'Invoke-Pfa2CLICommand' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> $VMHost = Get-VMhost | Select-Object -First 1
Get-VMhost: The term 'Get-VMhost' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> $EsxCli = Get-EsxCli -VMHost $VMhost -V2
Get-EsxCli: The term 'Get-EsxCli' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> $Snaps = $esxcli.storage.vmfs.snapshot.list.invoke()
InvalidOperation: You cannot call a method on a null-valued expression.
PS /Users/ned> if ($Snaps.Count -gt 0) {
>>     Foreach ($Snap in $Snaps) {
>>         Write-Host "Snapshot Found: $($Snap.VolumeName)"
>>         $esxcli.storage.vmfs.snapshot.resignature.invoke(@{volumelabel=$($Snap.VolumeName)})
>>     }
>> } else {
>>     Write-Host "No Snapshot volumes found"
>> }
No Snapshot volumes found
PS /Users/ned> $Datastore = Get-Datastore -Name $dsname
Get-Datastore: The term 'Get-Datastore' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> $VMFolder  = Get-Folder -Type VM -Name "Discovered virtual machine"
Get-Folder: The term 'Get-Folder' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> foreach($Datastore in $Datastore) {
>>     # Searches for .VMX Files in datastore variable
>>     $ds = Get-Datastore -Name $Datastore | %{Get-View $_.Id}
>>     $SearchSpec = New-Object VMware.Vim.HostDatastoreBrowserSearchSpec
>>     $SearchSpec.matchpattern = "*.vmx"
>>     $dsBrowser = Get-View $ds.browser
>>     $DatastorePath = "[" + $ds.Summary.Name + "]"
>>     # Find all .VMX file paths in Datastore variable and filters out .snapshot
>>     $SearchResults = $dsBrowser.SearchDatastoreSubFolders($DatastorePath,$SearchSpec) | Where-Object {$_.FolderPath -notmatch ".snapshot"} | %{$_.FolderPath + $_.File.Path}
>>     # Register all .VMX files with vCenter
>>     foreach($SearchResult in $SearchResults) {
>>     New-VM -VMFilePath $SearchResult -VMHost $VMHost -Location $VMFolder -RunAsync -ErrorAction SilentlyContinue
>>    }Install-Module -name PureStoragePowerShellSDK2
>> ^C
PS /Users/ned> install-module -Name PureStoragePowerShellSDK2

Untrusted repository
You are installing the modules from an untrusted repository. If you trust this repository, change its InstallationPolicy value by running the Set-PSRepository cmdlet. Are you sure you want to install 
the modules from 'PSGallery'?
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "N"): Yes
PS /Users/ned>                                                                                                          
PS /Users/ned> 
PS /Users/ned> 
PS /Users/ned> #####                                    
PS /Users/ned> # Work in progress
PS /Users/ned> #####
PS /Users/ned> $vcenter  = "VC1.ne-lab.local"
PS /Users/ned> $vcuser   = "administrator@puremagic.local"
PS /Users/ned> $vcpass   = "P@ssword1"
PS /Users/ned> $endpoint = "nelab-flasharray2.ne-lab.local"
PS /Users/ned> $podname  = "TestDR"
PS /Users/ned> $cluster  = "Prod"
PS /Users/ned> $dsname   = "ProdTest"
PS /Users/ned> $user = "pureuser"
PS /Users/ned> $password = "P@ssword1"
PS /Users/ned> $cred = Get-Credential -Message "Enter credentials for Pure Array"

PowerShell credential request
Enter credentials for Pure Array
User: pureuser
Password for user pureuser: *********

PS /Users/ned> # imports
PS /Users/ned> Import-Module PureStoragePowerShellSDK2
PS /Users/ned> # Connect to vCenter
PS /Users/ned> Connect-VIserver $vcenter -user $vcuser -password $vcpass
Connect-VIserver: The term 'Connect-VIserver' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> # Promote the DR Site Pod
PS /Users/ned> # $promote = "purepod promote $podname"
PS /Users/ned> # New-PfaCLICommand -EndPoint $endpoint -CommandText $promote -UserName $username -Password (ConvertTo-SecureString -AsPlainText $password -Force)
PS /Users/ned> # Invoke-Pfa2CLICommand -Credential $cred -EndPoint $endpoint -CommandText $promote
PS /Users/ned> # or the following:
PS /Users/ned> # $RemotePod = Get-Pfa2Pod -Name $podname
PS /Users/ned> # Update-Pfa2Pod -Array $TargetArray -Name $RemotePod.Name  -RequestedPromotionState "promoted"
PS /Users/ned> # From Jase: connect to target pod and promote it
PS /Users/ned> Connect-Pfa2Array -IgnoreCertificateError -Endpoint $endpoint -Credential $cred

ArrayName                      ApiVersion
---------                      ----------
nelab-flasharray2.ne-lab.local 2.15

PS /Users/ned> $ADRPOD = Get-Pfa2Pod -Name $podname
PS /Users/ned> Update-Pfa2Pod -Name $ADRPOD.Name -RequestedPromotionState "promoted" #promote the pod

Id                      : 27782d61-3653-2856-03bc-a35cebc754ed
Name                    : TestDR
Arrays                  : {@{Id='10c87e0a-001a-47b8-8719-a2096197c698'; Name='NELab-FlashArray2'; MediatorStatus='online'; PreElected=False; Status='online'}}
Destroyed               : False
FailoverPreferences     : {}
Footprint               : 6137779
Mediator                : purestorage
MediatorVersion         : 
Source                  : 
Space                   : @{DataReduction=4.1497254; Shared=0; Snapshots=0; ThinProvisioning=0.999982; TotalPhysical=4558500; TotalProvisioned=5497558138880; TotalReduction=230416.94; Unique=4558500; 
                          Virtual=99009024; Replication=0}
TimeRemaining           : 
LinkSourceCount         : 1
LinkTargetCount         : 0
PromotionStatus         : promoting
RequestedPromotionState : promoted
ArrayCount              : 1
EradicationConfig       : @{ManualEradication='all-enabled'}
QuotaLimit              : 


PS /Users/ned> #
PS /Users/ned> # Wait for the DR Site Pod to be promoted
PS /Users/ned> $podstatus = "purepod list $podname"
PS /Users/ned> do {
>>     Write-Host "Waiting for Pod Promotion"
>>     Start-Sleep -Milliseconds 500
>>     $test = Invoke-Pfa2CLICommand -EndPoint $endpoint -CommandText $podstatus -Credential $cred
>> } while ($test | select-string -pattern "promoting")
Waiting for Pod Promotion
Waiting for Pod Promotion
Waiting for Pod Promotion
PS /Users/ned> $VMHost = Get-VMhost | Select-Object -First 1
Get-VMhost: The term 'Get-VMhost' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> $EsxCli = Get-EsxCli -VMHost $VMhost -V2
Get-EsxCli: The term 'Get-EsxCli' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> $Snaps = $esxcli.storage.vmfs.snapshot.list.invoke()
InvalidOperation: You cannot call a method on a null-valued expression.
PS /Users/ned> if ($Snaps.Count -gt 0) {
>>     Foreach ($Snap in $Snaps) {
>>         Write-Host "Snapshot Found: $($Snap.VolumeName)"
>>         $esxcli.storage.vmfs.snapshot.resignature.invoke(@{volumelabel=$($Snap.VolumeName)})
>>     }
>> } else {
>>     Write-Host "No Snapshot volumes found"
>> }
No Snapshot volumes found
PS /Users/ned> $Datastore = Get-Datastore -Name $dsname
Get-Datastore: The term 'Get-Datastore' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> $VMFolder  = Get-Folder -Type VM -Name "Discovered virtual machine"
Get-Folder: The term 'Get-Folder' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/ned> foreach($Datastore in $Datastore) {
>>     # Searches for .VMX Files in datastore variable
>>     $ds = Get-Datastore -Name $Datastore | %{Get-View $_.Id}
>>     $SearchSpec = New-Object VMware.Vim.HostDatastoreBrowserSearchSpec
>>     $SearchSpec.matchpattern = "*.vmx"
>>     $dsBrowser = Get-View $ds.browser
>>     $DatastorePath = "[" + $ds.Summary.Name + "]"
>>     # Find all .VMX file paths in Datastore variable and filters out .snapshot
>>     $SearchResults = $dsBrowser.SearchDatastoreSubFolders($DatastorePath,$SearchSpec) | Where-Object {$_.FolderPath -notmatch ".snapshot"} | %{$_.FolderPath + $_.File.Path}
>>     # Register all .VMX files with vCenter
>>     foreach($SearchResult in $SearchResults) {
>>     New-VM -VMFilePath $SearchResult -VMHost $VMHost -Location $VMFolder -RunAsync -ErrorAction SilentlyContinue
>>    }^C
PS /Users/ned> install-module -Name PowerCLI                                      
Install-Package: No match was found for the specified search criteria and module name 'PowerCLI'. Try Get-PSRepository to see all available registered module repositories.
PS /Users/ned> install-module vmware-powerCLI
Install-Package: No match was found for the specified search criteria and module name 'vmware-powerCLI'. Try Get-PSRepository to see all available registered module repositories.
PS /Users/ned> install-module vmware.powercli

Untrusted repository
You are installing the modules from an untrusted repository. If you trust this repository, change its InstallationPolicy value by running the Set-PSRepository cmdlet. Are you sure you want to install 
the modules from 'PSGallery'?
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "N"): yes
PS /Users/ned>                                                                                                          
PS /Users/ned>                                                                                                          
PS /Users/ned> 
PS /Users/ned> #####                                    
PS /Users/ned> # Work in progress
PS /Users/ned> #####
PS /Users/ned> $vcenter  = "VC1.ne-lab.local"
PS /Users/ned> $vcuser   = "administrator@puremagic.local"
PS /Users/ned> $vcpass   = "P@ssword1"
PS /Users/ned> $endpoint = "nelab-flasharray2.ne-lab.local"
PS /Users/ned> $podname  = "TestDR"
PS /Users/ned> $cluster  = "Prod"
PS /Users/ned> $dsname   = "ProdTest"
PS /Users/ned> $user = "pureuser"
PS /Users/ned> $password = "P@ssword1"
PS /Users/ned> $cred = Get-Credential -Message "Enter credentials for Pure Array"

PowerShell credential request
Enter credentials for Pure Array
User: pureuser
Password for user pureuser: *********

PS /Users/ned> # imports
PS /Users/ned> Import-Module PureStoragePowerShellSDK2
PS /Users/ned> Import-Module vmware.powercli
WARNING: Please consider joining the VMware Customer Experience Improvement Program, so you can help us make PowerCLI a better product. You can join using the following command:

Set-PowerCLIConfiguration -Scope User -ParticipateInCEIP $true

VMware's Customer Experience Improvement Program ("CEIP") provides VMware with information that enables VMware to improve its products and services, to fix problems, and to advise you on how best to deploy and use our products.  As part of the CEIP, VMware collects technical information about your organization’s use of VMware products and services on a regular basis in association with your organization’s VMware license key(s).  This information does not personally identify any individual.

For more details: type "help about_ceip" to see the related help article.

To disable this warning and set your preference use the following command and restart PowerShell: 
Set-PowerCLIConfiguration -Scope User -ParticipateInCEIP $true or $false.
          Welcome to VMware PowerCLI!

Log in to a vCenter Server or ESX host:              Connect-VIServer
To find out what commands are available, type:       Get-VICommand
To show searchable help for all PowerCLI commands:   Get-PowerCLIHelp
Once you've connected, display all virtual machines: Get-VM
If you need more help, visit the PowerCLI community: Get-PowerCLICommunity

       Copyright (C) VMware, Inc. All rights reserved.


PS /Users/ned> # Connect to vCenter
PS /Users/ned> Connect-VIserver $vcenter -user $vcuser -password $vcpass
Connect-VIServer: 10/10/2023 2:34:57 PM	Connect-VIServer		The SSL connection could not be established, see inner exception.	
PS /Users/ned> # Promote the DR Site Pod
PS /Users/ned> # $promote = "purepod promote $podname"
PS /Users/ned> # New-PfaCLICommand -EndPoint $endpoint -CommandText $promote -UserName $username -Password (ConvertTo-SecureString -AsPlainText $password -Force)
PS /Users/ned> # Invoke-Pfa2CLICommand -Credential $cred -EndPoint $endpoint -CommandText $promote
PS /Users/ned> # or the following:
PS /Users/ned> # $RemotePod = Get-Pfa2Pod -Name $podname
PS /Users/ned> # Update-Pfa2Pod -Array $TargetArray -Name $RemotePod.Name  -RequestedPromotionState "promoted"
PS /Users/ned> # From Jase: connect to target pod and promote it
PS /Users/ned> Connect-Pfa2Array -IgnoreCertificateError -Endpoint $endpoint -Credential $cred

ArrayName                      ApiVersion
---------                      ----------
nelab-flasharray2.ne-lab.local 2.15

PS /Users/ned> $ADRPOD = Get-Pfa2Pod -Name $podname
PS /Users/ned> Update-Pfa2Pod -Name $ADRPOD.Name -RequestedPromotionState "promoted" #promote the pod

Id                      : 27782d61-3653-2856-03bc-a35cebc754ed
Name                    : TestDR
Arrays                  : {@{Id='10c87e0a-001a-47b8-8719-a2096197c698'; Name='NELab-FlashArray2'; MediatorStatus='online'; PreElected=False; Status='online'}}
Destroyed               : False
FailoverPreferences     : {}
Footprint               : 7893835
Mediator                : purestorage
MediatorVersion         : 
Source                  : 
Space                   : @{DataReduction=4.3356175; Shared=0; Snapshots=0; ThinProvisioning=0.999982; TotalPhysical=6314556; TotalProvisioned=5497558138880; TotalReduction=240738.75; Unique=6314556; 
                          Virtual=99009024; Replication=0}
TimeRemaining           : 
LinkSourceCount         : 1
LinkTargetCount         : 0
PromotionStatus         : promoting
RequestedPromotionState : promoted
ArrayCount              : 1
EradicationConfig       : @{ManualEradication='all-enabled'}
QuotaLimit              : 


PS /Users/ned> #
PS /Users/ned> # Wait for the DR Site Pod to be promoted
PS /Users/ned> $podstatus = "purepod list $podname"
PS /Users/ned> do {
>>     Write-Host "Waiting for Pod Promotion"
>>     Start-Sleep -Milliseconds 500
>>     $test = Invoke-Pfa2CLICommand -EndPoint $endpoint -CommandText $podstatus -Credential $cred
>> } while ($test | select-string -pattern "promoting")
Waiting for Pod Promotion
PS /Users/ned> $VMHost = Get-VMhost | Select-Object -First 1
Get-VMHost: 10/10/2023 2:35:17 PM	Get-VMHost		You are not currently connected to any servers. Please connect first using a Connect cmdlet.	
PS /Users/ned> $EsxCli = Get-EsxCli -VMHost $VMhost -V2
Get-EsxCli: 10/10/2023 2:35:17 PM	Get-EsxCli		Value cannot be found for the mandatory parameter VMHost	
PS /Users/ned> $Snaps = $esxcli.storage.vmfs.snapshot.list.invoke()
InvalidOperation: You cannot call a method on a null-valued expression.
PS /Users/ned> if ($Snaps.Count -gt 0) {
>>     Foreach ($Snap in $Snaps) {
>>         Write-Host "Snapshot Found: $($Snap.VolumeName)"
>>         $esxcli.storage.vmfs.snapshot.resignature.invoke(@{volumelabel=$($Snap.VolumeName)})
>>     }
>> } else {
>>     Write-Host "No Snapshot volumes found"
>> }
No Snapshot volumes found
PS /Users/ned> $Datastore = Get-Datastore -Name $dsname
Get-Datastore: 10/10/2023 2:35:17 PM	Get-Datastore		You are not currently connected to any servers. Please connect first using a Connect cmdlet.	
PS /Users/ned> $VMFolder  = Get-Folder -Type VM -Name "Discovered virtual machine"
Get-Folder: 10/10/2023 2:35:17 PM	Get-Folder		You are not currently connected to any servers. Please connect first using a Connect cmdlet.	
PS /Users/ned> foreach($Datastore in $Datastore) {
>>     # Searches for .VMX Files in datastore variable
>>     $ds = Get-Datastore -Name $Datastore | %{Get-View $_.Id}
>>     $SearchSpec = New-Object VMware.Vim.HostDatastoreBrowserSearchSpec
>>     $SearchSpec.matchpattern = "*.vmx"
>>     $dsBrowser = Get-View $ds.browser
>>     $DatastorePath = "[" + $ds.Summary.Name + "]"
>>     # Find all .VMX file paths in Datastore variable and filters out .snapshot
>>     $SearchResults = $dsBrowser.SearchDatastoreSubFolders($DatastorePath,$SearchSpec) | Where-Object {$_.FolderPath -notmatch ".snapshot"} | %{$_.FolderPath + $_.File.Path}
>>     # Register all .VMX files with vCenter
>>     foreach($SearchResult in $SearchResults) {
>>     New-VM -VMFilePath $SearchResult -VMHost $VMHost -Location $VMFolder -RunAsync -ErrorAction SilentlyContinue
>>    }
>> }
PS /Users/ned> 
PS /Users/ned> ^C
PS /Users/ned> Set-PowerCLIConfiguration -Scope User -ParticipateInCEIP $false         

Perform operation?
Performing operation 'Update VMware.PowerCLI configuration.'?
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "Y"): A

Scope    ProxyPolicy     DefaultVIServerMode InvalidCertificateAction  DisplayDeprecationWarnings WebOperationTimeout
                                                                                                  Seconds
-----    -----------     ------------------- ------------------------  -------------------------- -------------------
Session  UseSystemProxy  Multiple            Unset                     True                       300
User                                                                                              
AllUsers                                                                                          

PS /Users/ned> 
PS /Users/ned> 
PS /Users/ned> #####                                    
PS /Users/ned> # Work in progress
PS /Users/ned> #####
PS /Users/ned> $vcenter  = "VC1.ne-lab.local"
PS /Users/ned> $vcuser   = "administrator@puremagic.local"
PS /Users/ned> $vcpass   = "P@ssword1"
PS /Users/ned> $endpoint = "nelab-flasharray2.ne-lab.local"
PS /Users/ned> $podname  = "TestDR"
PS /Users/ned> $cluster  = "Prod"
PS /Users/ned> $dsname   = "ProdTest"
PS /Users/ned> $user = "pureuser"
PS /Users/ned> $password = "P@ssword1"
PS /Users/ned> $cred = Get-Credential -Message "Enter credentials for Pure Array"

PowerShell credential request
Enter credentials for Pure Array
User: pureuser
Password for user pureuser: *********

PS /Users/ned> # imports
PS /Users/ned> Import-Module PureStoragePowerShellSDK2
PS /Users/ned> Import-Module vmware.powercli
PS /Users/ned> # Connect to vCenter
PS /Users/ned> Connect-VIserver $vcenter -user $vcuser -password $vcpass
Connect-VIServer: 10/10/2023 2:37:26 PM	Connect-VIServer		The SSL connection could not be established, see inner exception.	
PS /Users/ned> # Promote the DR Site Pod
PS /Users/ned> # $promote = "purepod promote $podname"
PS /Users/ned> # New-PfaCLICommand -EndPoint $endpoint -CommandText $promote -UserName $username -Password (ConvertTo-SecureString -AsPlainText $password -Force)
PS /Users/ned> # Invoke-Pfa2CLICommand -Credential $cred -EndPoint $endpoint -CommandText $promote
PS /Users/ned> # or the following:
PS /Users/ned> # $RemotePod = Get-Pfa2Pod -Name $podname
PS /Users/ned> # Update-Pfa2Pod -Array $TargetArray -Name $RemotePod.Name  -RequestedPromotionState "promoted"
PS /Users/ned> # From Jase: connect to target pod and promote it
PS /Users/ned> Connect-Pfa2Array -IgnoreCertificateError -Endpoint $endpoint -Credential $cred

ArrayName                      ApiVersion
---------                      ----------
nelab-flasharray2.ne-lab.local 2.15

PS /Users/ned> $ADRPOD = Get-Pfa2Pod -Name $podname
PS /Users/ned> Update-Pfa2Pod -Name $ADRPOD.Name -RequestedPromotionState "promoted" #promote the pod
Update-Pfa2Pod: Cannot promote a pod that is already promoted. (TestDR), https://nelab-flasharray2.ne-lab.local/api/2.15/pods?names=TestDR (PATCH)
PS /Users/ned> #
PS /Users/ned> # Wait for the DR Site Pod to be promoted
PS /Users/ned> $podstatus = "purepod list $podname"
PS /Users/ned> do {
>>     Write-Host "Waiting for Pod Promotion"
>>     Start-Sleep -Milliseconds 500
>>     $test = Invoke-Pfa2CLICommand -EndPoint $endpoint -CommandText $podstatus -Credential $cred
>> } while ($test | select-string -pattern "promoting")
Waiting for Pod Promotion
PS /Users/ned> $VMHost = Get-VMhost | Select-Object -First 1
Get-VMHost: 10/10/2023 2:37:34 PM	Get-VMHost		You are not currently connected to any servers. Please connect first using a Connect cmdlet.	
PS /Users/ned> $EsxCli = Get-EsxCli -VMHost $VMhost -V2
Get-EsxCli: 10/10/2023 2:37:34 PM	Get-EsxCli		Value cannot be found for the mandatory parameter VMHost	
PS /Users/ned> $Snaps = $esxcli.storage.vmfs.snapshot.list.invoke()
InvalidOperation: You cannot call a method on a null-valued expression.
PS /Users/ned> if ($Snaps.Count -gt 0) {
>>     Foreach ($Snap in $Snaps) {
>>         Write-Host "Snapshot Found: $($Snap.VolumeName)"
>>         $esxcli.storage.vmfs.snapshot.resignature.invoke(@{volumelabel=$($Snap.VolumeName)})
>>     }
>> } else {
>>     Write-Host "No Snapshot volumes found"
>> }
No Snapshot volumes found
PS /Users/ned> $Datastore = Get-Datastore -Name $dsname
Get-Datastore: 10/10/2023 2:37:34 PM	Get-Datastore		You are not currently connected to any servers. Please connect first using a Connect cmdlet.	
PS /Users/ned> $VMFolder  = Get-Folder -Type VM -Name "Discovered virtual machine"
Get-Folder: 10/10/2023 2:37:34 PM	Get-Folder		You are not currently connected to any servers. Please connect first using a Connect cmdlet.	
PS /Users/ned> foreach($Datastore in $Datastore) {
>>     # Searches for .VMX Files in datastore variable
>>     $ds = Get-Datastore -Name $Datastore | %{Get-View $_.Id}
>>     $SearchSpec = New-Object VMware.Vim.HostDatastoreBrowserSearchSpec
>>     $SearchSpec.matchpattern = "*.vmx"
>>     $dsBrowser = Get-View $ds.browser
>>     $DatastorePath = "[" + $ds.Summary.Name + "]"
>>     # Find all .VMX file paths in Datastore variable and filters out .snapshot
>>     $SearchResults = $dsBrowser.SearchDatastoreSubFolders($DatastorePath,$SearchSpec) | Where-Object {$_.FolderPath -notmatch ".snapshot"} | %{$_.FolderPath + $_.File.Path}
>>     # Register all .VMX files with vCenter
>>     foreach($SearchResult in $SearchResults) {
>>     New-VM -VMFilePath $SearchResult -VMHost $VMHost -Location $VMFolder -RunAsync -ErrorAction SilentlyContinue
>>    }
>> }
PS /Users/ned> Connect-VIserver -IgnoreCertificateError $vcenter -user $vcuser -password $vcpass
Connect-VIServer: A parameter cannot be found that matches parameter name 'IgnoreCertificateError'.
PS /Users/ned> help Connect-VIserver
PS /Users/ned> 
PS /Users/ned> 
PS /Users/ned> Connect-VIserver -Force $vcenter -user $vcuser -password $vcpass                 

Name                           Port  User
----                           ----  ----
VC1.ne-lab.local               443   PUREMAGIC.LOCAL\Administrator

PS /Users/ned> #####                                    
PS /Users/ned> # Work in progress
PS /Users/ned> #####
PS /Users/ned> $vcenter  = "VC1.ne-lab.local"
PS /Users/ned> $vcuser   = "administrator@puremagic.local"
PS /Users/ned> $vcpass   = "P@ssword1"
PS /Users/ned> $endpoint = "nelab-flasharray2.ne-lab.local"
PS /Users/ned> $podname  = "TestDR"
PS /Users/ned> $cluster  = "Prod"
PS /Users/ned> $dsname   = "ProdTest"
PS /Users/ned> $user = "pureuser"
PS /Users/ned> $password = "P@ssword1"
PS /Users/ned> $cred = Get-Credential -Message "Enter credentials for Pure Array"

PowerShell credential request
Enter credentials for Pure Array
User: pureuser
Password for user pureuser: *********

PS /Users/ned> # imports
PS /Users/ned> Import-Module PureStoragePowerShellSDK2
PS /Users/ned> Import-Module vmware.powercli
PS /Users/ned> # Connect to vCenter
PS /Users/ned> Connect-VIserver -Force $vcenter -user $vcuser -password $vcpass

Name                           Port  User
----                           ----  ----
VC1.ne-lab.local               443   PUREMAGIC.LOCAL\Administrator

PS /Users/ned> # Promote the DR Site Pod
PS /Users/ned> # $promote = "purepod promote $podname"
PS /Users/ned> # New-PfaCLICommand -EndPoint $endpoint -CommandText $promote -UserName $username -Password (ConvertTo-SecureString -AsPlainText $password -Force)
PS /Users/ned> # Invoke-Pfa2CLICommand -Credential $cred -EndPoint $endpoint -CommandText $promote
PS /Users/ned> # or the following:
PS /Users/ned> # $RemotePod = Get-Pfa2Pod -Name $podname
PS /Users/ned> # Update-Pfa2Pod -Array $TargetArray -Name $RemotePod.Name  -RequestedPromotionState "promoted"
PS /Users/ned> # From Jase: connect to target pod and promote it
PS /Users/ned> Connect-Pfa2Array -IgnoreCertificateError -Endpoint $endpoint -Credential $cred

ArrayName                      ApiVersion
---------                      ----------
nelab-flasharray2.ne-lab.local 2.15

PS /Users/ned> $ADRPOD = Get-Pfa2Pod -Name $podname
PS /Users/ned> Update-Pfa2Pod -Name $ADRPOD.Name -RequestedPromotionState "promoted" #promote the pod
Update-Pfa2Pod: Cannot promote a pod that is already promoted. (TestDR), https://nelab-flasharray2.ne-lab.local/api/2.15/pods?names=TestDR (PATCH)
PS /Users/ned> #
PS /Users/ned> # Wait for the DR Site Pod to be promoted
PS /Users/ned> $podstatus = "purepod list $podname"
PS /Users/ned> do {
>>     Write-Host "Waiting for Pod Promotion"
>>     Start-Sleep -Milliseconds 500
>>     $test = Invoke-Pfa2CLICommand -EndPoint $endpoint -CommandText $podstatus -Credential $cred
>> } while ($test | select-string -pattern "promoting")
Waiting for Pod Promotion
PS /Users/ned> $VMHost = Get-VMhost | Select-Object -First 1
PS /Users/ned> $EsxCli = Get-EsxCli -VMHost $VMhost -V2
PS /Users/ned> $Snaps = $esxcli.storage.vmfs.snapshot.list.invoke()
PS /Users/ned> if ($Snaps.Count -gt 0) {
>>     Foreach ($Snap in $Snaps) {
>>         Write-Host "Snapshot Found: $($Snap.VolumeName)"
>>         $esxcli.storage.vmfs.snapshot.resignature.invoke(@{volumelabel=$($Snap.VolumeName)})
>>     }
>> } else {
>>     Write-Host "No Snapshot volumes found"
>> }
No Snapshot volumes found
PS /Users/ned> $Datastore = Get-Datastore -Name $dsname
PS /Users/ned> $VMFolder  = Get-Folder -Type VM -Name "Discovered virtual machine"
PS /Users/ned> foreach($Datastore in $Datastore) {
>>     # Searches for .VMX Files in datastore variable
>>     $ds = Get-Datastore -Name $Datastore | %{Get-View $_.Id}
>>     $SearchSpec = New-Object VMware.Vim.HostDatastoreBrowserSearchSpec
>>     $SearchSpec.matchpattern = "*.vmx"
>>     $dsBrowser = Get-View $ds.browser
>>     $DatastorePath = "[" + $ds.Summary.Name + "]"
>>     # Find all .VMX file paths in Datastore variable and filters out .snapshot
>>     $SearchResults = $dsBrowser.SearchDatastoreSubFolders($DatastorePath,$SearchSpec) | Where-Object {$_.FolderPath -notmatch ".snapshot"} | %{$_.FolderPath + $_.File.Path}
>>     # Register all .VMX files with vCenter
>>     foreach($SearchResult in $SearchResults) {
>>     New-VM -VMFilePath $SearchResult -VMHost $VMHost -Location $VMFolder -RunAsync -ErrorAction SilentlyContinue
>>    }
>> }

Name                           State      % Complete Start Time   Finish Time
----                           -----      ---------- ----------   -----------
RegisterVM_Task                Running             0 02:46:12 PM  

PS /Users/ned> 
PS /Users/ned> 
PS /Users/ned> 
PS /Users/ned> #####                                    
PS /Users/ned> # Work in progress
PS /Users/ned> #####
PS /Users/ned> $vcenter  = "VC1.ne-lab.local"
PS /Users/ned> $vcuser   = "administrator@puremagic.local"
PS /Users/ned> $vcpass   = "P@ssword1"
PS /Users/ned> $endpoint = "nelab-flasharray2.ne-lab.local"
PS /Users/ned> $podname  = "TestDR"
PS /Users/ned> $cluster  = "Prod"
PS /Users/ned> $dsname   = "ProdTest"
PS /Users/ned> $user = "pureuser"
PS /Users/ned> $password = "P@ssword1"
PS /Users/ned> $cred = Get-Credential -Message "Enter credentials for Pure Array"

PowerShell credential request
Enter credentials for Pure Array
User: pureuser
Password for user pureuser: *********

PS /Users/ned> # imports
PS /Users/ned> Import-Module PureStoragePowerShellSDK2
PS /Users/ned> Import-Module vmware.powercli
PS /Users/ned> # Connect to vCenter
PS /Users/ned> Connect-VIserver -Force $vcenter -user $vcuser -password $vcpass

Name                           Port  User
----                           ----  ----
VC1.ne-lab.local               443   PUREMAGIC.LOCAL\Administrator

PS /Users/ned> # Promote the DR Site Pod
PS /Users/ned> # $promote = "purepod promote $podname"
PS /Users/ned> # New-PfaCLICommand -EndPoint $endpoint -CommandText $promote -UserName $username -Password (ConvertTo-SecureString -AsPlainText $password -Force)
PS /Users/ned> # Invoke-Pfa2CLICommand -Credential $cred -EndPoint $endpoint -CommandText $promote
PS /Users/ned> # or the following:
PS /Users/ned> # $RemotePod = Get-Pfa2Pod -Name $podname
PS /Users/ned> # Update-Pfa2Pod -Array $TargetArray -Name $RemotePod.Name  -RequestedPromotionState "promoted"
PS /Users/ned> # From Jase: connect to target pod and promote it
PS /Users/ned> Connect-Pfa2Array -IgnoreCertificateError -Endpoint $endpoint -Credential $cred

ArrayName                      ApiVersion
---------                      ----------
nelab-flasharray2.ne-lab.local 2.15

PS /Users/ned> $ADRPOD = Get-Pfa2Pod -Name $podname
PS /Users/ned> Update-Pfa2Pod -Name $ADRPOD.Name -RequestedPromotionState "promoted" #promote the pod

Id                      : 27782d61-3653-2856-03bc-a35cebc754ed
Name                    : TestDR
Arrays                  : {@{Id='10c87e0a-001a-47b8-8719-a2096197c698'; Name='NELab-FlashArray2'; MediatorStatus='online'; PreElected=False; Status='online'}}
Destroyed               : False
FailoverPreferences     : {}
Footprint               : 7997682
Mediator                : purestorage
MediatorVersion         : 
Source                  : 
Space                   : @{DataReduction=4.3359733; Shared=0; Snapshots=0; ThinProvisioning=0.999982; TotalPhysical=6418403; TotalProvisioned=5497558138880; TotalReduction=240698.75; Unique=6418403; 
                          Virtual=99033600; Replication=0}
TimeRemaining           : 
LinkSourceCount         : 1
LinkTargetCount         : 0
PromotionStatus         : promoting
RequestedPromotionState : promoted
ArrayCount              : 1
EradicationConfig       : @{ManualEradication='all-enabled'}
QuotaLimit              : 


PS /Users/ned> #
PS /Users/ned> # Wait for the DR Site Pod to be promoted
PS /Users/ned> $podstatus = "purepod list $podname"
PS /Users/ned> do {
>>     Write-Host "Waiting for Pod Promotion"
>>     Start-Sleep -Milliseconds 500
>>     $test = Invoke-Pfa2CLICommand -EndPoint $endpoint -CommandText $podstatus -Credential $cred
>> } while ($test | select-string -pattern "promoting")
Waiting for Pod Promotion
PS /Users/ned> $VMHost = Get-VMhost | Select-Object -First 1
PS /Users/ned> $EsxCli = Get-EsxCli -VMHost $VMhost -V2
PS /Users/ned> $Snaps = $esxcli.storage.vmfs.snapshot.list.invoke()
PS /Users/ned> if ($Snaps.Count -gt 0) {
>>     Foreach ($Snap in $Snaps) {
>>         Write-Host "Snapshot Found: $($Snap.VolumeName)"
>>         $esxcli.storage.vmfs.snapshot.resignature.invoke(@{volumelabel=$($Snap.VolumeName)})
>>     }
>> } else {
>>     Write-Host "No Snapshot volumes found"
>> }
No Snapshot volumes found
PS /Users/ned> $Datastore = Get-Datastore -Name $dsname
PS /Users/ned> $VMFolder  = Get-Folder -Type VM -Name "Discovered virtual machine"
PS /Users/ned> foreach($Datastore in $Datastore) {
>>     # Searches for .VMX Files in datastore variable
>>     $ds = Get-Datastore -Name $Datastore | %{Get-View $_.Id}
>>     $SearchSpec = New-Object VMware.Vim.HostDatastoreBrowserSearchSpec
>>     $SearchSpec.matchpattern = "*.vmx"
>>     $dsBrowser = Get-View $ds.browser
>>     $DatastorePath = "[" + $ds.Summary.Name + "]"
>>     # Find all .VMX file paths in Datastore variable and filters out .snapshot
>>     $SearchResults = $dsBrowser.SearchDatastoreSubFolders($DatastorePath,$SearchSpec) | Where-Object {$_.FolderPath -notmatch ".snapshot"} | %{$_.FolderPath + $_.File.Path}
>>     # Register all .VMX files with vCenter
>>     foreach($SearchResult in $SearchResults) {
>>     New-VM -VMFilePath $SearchResult -VMHost $VMHost -Location $VMFolder -RunAsync -ErrorAction SilentlyContinue
>>    }
>> }
